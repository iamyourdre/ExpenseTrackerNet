@page "/login"
@inject NavigationManager Navigation
@inject ILoginService LoginService
@inject IJSRuntime JS

@using ExpenseTrackerNet.Client.Services
@using ExpenseTrackerNet.Shared.Models
@using static ExpenseTrackerNet.Client.Shared.Toaster


<PageTitle>Login</PageTitle>

<Toaster @ref="toaster" />
<div>
    <h3>Login</h3>
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" OnInvalidSubmit="HandleInvalidLogin">
        <DataAnnotationsValidator />
        @* <ValidationSummary /> *@
        <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        </div>
        <div class="mb-3">
            <p>
				Don't have an account? <a href="/register">Register here</a>.
            </p>
		</div>
        <div class="mb-3">
            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <div>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Logging in...
                    </div>
                }
                else
                {
                    <text>Login</text>
                }
            </button>
        </div>
    </EditForm>
</div>

@code {
	private UserDTO loginModel = new();
	private Toaster? toaster;
	private bool isLoading = false;

	private async Task HandleLogin()
	{
		isLoading = true;
		StateHasChanged();

		var result = await LoginService.LoginAsync(loginModel);

		if (!result.Success)
		{
			toaster?.ShowMessage(ToastType.Danger, result.ErrorMessage ?? "Login failed.");
		}

		isLoading = false;
		StateHasChanged();
	}
	private void HandleInvalidLogin(EditContext editContext)
    {
        var messages = editContext.GetValidationMessages();
        foreach (var message in messages)
        {
            toaster?.ShowMessage(ToastType.Danger, message);
        }
    }
}
