@page "/register"
@inject NavigationManager Navigation
@inject IRegisterService RegisterService
@inject IJSRuntime JS

@using ExpenseTrackerNet.Client.Services
@using ExpenseTrackerNet.Shared.Models
@using static ExpenseTrackerNet.Client.Shared.Toaster


<PageTitle>Register</PageTitle>

<Toaster @ref="toaster" />
<div>
    <h3>Register</h3>
    <EditForm Model="@registerModel" OnValidSubmit="HandleRegister" OnInvalidSubmit="HandleInvalidRegister">
        <DataAnnotationsValidator />
        @* <ValidationSummary /> *@
        <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <InputText id="username" class="form-control" @bind-Value="registerModel.Username" />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
        </div>
        <div class="mb-3">
            <label for="confirmPassword" class="form-label">Confirm Password</label>
            <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="confirmPassword" />
        </div>
        <div class="mb-3">
            <p>
                Already have an account? <a href="/login">Login here</a>.
			</p>
		</div>
        <div class="mb-3">
            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <div>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Registering...
                    </div>
                }
                else
                {
                    <text>Register</text>
                }
            </button>
        </div>
    </EditForm>
</div>

@code {
    private UserDTO registerModel = new();
    private string confirmPassword = string.Empty;
    private Toaster? toaster;
    private bool isLoading = false;

    private int isPasswordsMatch = 0;

    private async Task HandleRegister()
    {
        if (registerModel.Password != confirmPassword)
        {
            toaster?.ShowMessage(ToastType.Danger, "Passwords do not match.");
            return;
        }

        isLoading = true;
        StateHasChanged();

        var result = await RegisterService.RegisterAsync(registerModel);

        if (!result.Success)
        {
            toaster?.ShowMessage(ToastType.Danger, result.ErrorMessage ?? "Login failed.");
        }

        isLoading = false;
        StateHasChanged();
    }

    private void HandleInvalidRegister(EditContext editContext)
    {
        var messages = editContext.GetValidationMessages();
        foreach (var message in messages)
        {
            toaster?.ShowMessage(ToastType.Danger, message);
        }
    }
}
