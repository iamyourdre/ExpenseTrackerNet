@page "/transactions"  
@inherits AuthGuardHeader
@using ExpenseTrackerNet.Client.Services
@using ExpenseTrackerNet.Shared.Models  
@using System.Text.Json
@inject HttpClient Http  
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage  
@inject ITransactionService TransactionService

<Toaster @ref="toaster" />
<div class="d-flex justify-content-between mb-4">
    <h3>Transactions</h3>
    <AddTrxFormModal OnTransactionAdded="HandleTransactionAdded" />
</div>


<div class="table-responsive">  
    <table class="table table-striped table-bordered align-middle">  
        <thead class="table-light">  
            <tr>  
                <th>Category</th>  
                <th>Description</th>  
                <th>Amount</th>  
                <th>Date</th>
				<th>Actions</th>
            </tr>  
        </thead>  
        <tbody>  
            @if (transactions != null && transactions.Any() && !isLoading)  
            {  
                foreach (var t in transactions)  
                {  
                    <tr>  
                        <td>
                            @{var iconClass = categories?.FirstOrDefault(c => c.Name == t.Category)?.Icon;}
                            <span class="badge me-1 rounded-circle" style="width: 32px; height: 32px; display:inline-block; text-align:center; line-height:25px; background-color: @categories?.FirstOrDefault(c => c.Name == t.Category)?.Color">
                                <i class="@(string.IsNullOrEmpty(iconClass) ? "fas fa-ellipsis-h" : iconClass)"></i>
                            </span>
                            @t.Category
                        </td>
                        <td>@t.Description</td>
                        <td class="@(t.Type == "Outcome" ? "text-danger" : "text-success")">
                            <b>
                                @(t.Type == "Outcome"
                                    ? "-Rp" + t.Amount.ToString("N0")
                                    : "Rp" + t.Amount.ToString("N0")
                                )
                            </b>
                        </td>
                        <td>@t.Date.ToString("dd/MM/yyyy HH:mm")</td>
                        <td>
                            <NavLink class="btn btn-sm btn-primary me-1" href="@($"/transactions/edit/{t.Id}")">
						        <i class="fas fa-edit"></i>
                            </NavLink>
                            <button class="btn btn-sm btn-danger" @onclick="() => HandleDeleteTransaction(t.Id.ToString())">
						        <i class="fas fa-trash"></i>
					        </button>
				        </td>
                    </tr>  
                }  
            }  
            else if (isLoading)  
            {  
                <tr>  
                    <td colspan="5" class="text-center">  
                        <div class="spinner-border" role="status">  
                            <span class="visually-hidden">Loading...</span>  
                        </div>  
                    </td>  
                </tr>
			}
			else
            {  
                <tr>  
                    <td colspan="5" class="text-center">No transactions found.</td>  
                </tr>  
            }  
        </tbody>  
    </table>  
</div>  

@code {
    private List<TransactionReadDTO>? transactions;  
    private List<Category>? categories;
    private bool isLoading = true;
    private Toaster? toaster;

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (!await EnsureAuthenticatedAsync())
            return;
        try
        {
            transactions = await TransactionService.GetUserTransactionsAsync();
            if (transactions != null)
            {
                transactions = transactions
                    .OrderByDescending(t => t.Date)
                    .ToList();
            }

            var json = await Http.GetStringAsync("data/Categories.json");
            using var doc = JsonDocument.Parse(json);

            categories = doc.RootElement.GetProperty("Income")
                .EnumerateArray()
                .Concat(doc.RootElement.GetProperty("Outcome").EnumerateArray())
                .Select(e => new Category
                {
                    Name = e.GetProperty("Name").GetString(),
                    Icon = e.GetProperty("Icon").GetString(),
                    Color = e.GetProperty("Color").GetString()
                })
                .ToList();
        }
        catch (Exception ex)
        {
            toaster?.ShowMessage(ToastType.Danger, "Failed to load transaction.");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }  

    private void HandleTransactionAdded(TransactionReadDTO newTransaction)
    {
        transactions ??= new List<TransactionReadDTO>();
        transactions.Add(newTransaction);
        transactions = transactions
            .OrderByDescending(t => t.Date)
            .ToList();
        StateHasChanged();
    }

    private async Task HandleDeleteTransaction(string transactionId)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this transaction?"))
        {
            return;
        }
        if (await TransactionService.DeleteTransactionAsync(transactionId))
        {
            transactions?.RemoveAll(t => t.Id.ToString() == transactionId.ToString());
            toaster?.ShowMessage(ToastType.Success, "Transaction deleted.");
            StateHasChanged();
        }
        else
        {
            toaster?.ShowMessage(ToastType.Danger, "Failed to delete transaction. Please try again.");
        }
    }
}

